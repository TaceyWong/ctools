package converters

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"

	"github.com/urfave/cli/v2"
)

var File2GoCMD = cli.Command{
	Name:     "file2go",
	Aliases:  []string{"curl2g"},
	Usage:    "文件转换为Go字节切片",
	Category: "转换工具",
	Action:   file2go,
	Flags: []cli.Flag{
		&cli.PathFlag{
			Name: "i", Aliases: []string{"input"}, Usage: "输入文件名", Value: "",
		},
		&cli.PathFlag{
			Name: "o", Aliases: []string{"output"}, Usage: "输出文件名", Value: "", Required: true,
		},
		&cli.StringFlag{
			Name: "p", Aliases: []string{"package"}, Usage: "生成go文件的包名", Value: "main",
		},
		&cli.StringFlag{
			Name: "v", Aliases: []string{"var", "variable"}, Usage: "资源变量名", Value: "_",
		},
		&cli.BoolFlag{
			Name: "z", Aliases: []string{"compress"}, Usage: "是否使用gzip压缩", Value: false,
		},
		&cli.StringFlag{
			Name: "t", Aliases: []string{"buildtags"}, Usage: "构建标签", Value: "",
		},
	},
}

func file2go(c *cli.Context) error {
	var out io.Writer

	if output := c.String("output"); output != "" {
		f, err := os.Create(output)
		if err != nil {
			return err
		}
		defer f.Close()
		out = f
	} else {
		out = os.Stdout
	}

	var in io.Reader
	if input := c.String("input"); input != "" {
		f, err := os.Open(input)
		if err != nil {
			return err
		}
		defer f.Close()
		in = f
	} else {
		in = os.Stdin
	}

	if err := write(out, in, c.Bool("compress"), c.String("buildtags"), c.String("package"), c.String("var")); err != nil {
		return err
	}

	return nil
}

func write(w io.Writer, r io.Reader, compress bool, buildTags string, packageName string, varName string) error {
	if compress {
		compressed := &bytes.Buffer{}
		cw, err := gzip.NewWriterLevel(compressed, gzip.BestCompression)
		if err != nil {
			return err
		}
		if _, err := io.Copy(cw, r); err != nil {
			return err
		}
		cw.Close()
		r = compressed
	}

	bs, err := ioutil.ReadAll(r)
	if err != nil {
		return err
	}

	if _, err := fmt.Fprintln(w, "// Code generated by file2byteslice. DO NOT EDIT."); err != nil {
		return err
	}
	if buildTags != "" {
		if _, err := fmt.Fprintln(w, "\n//go:build "+strings.Join(strings.Split(buildTags, ","), " && ")); err != nil {
			return err
		}
		if _, err := fmt.Fprintln(w, "// +build "+buildTags); err != nil {
			return err
		}
	}
	if _, err := fmt.Fprintln(w, ""); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, "package "+packageName); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, ""); err != nil {
		return err
	}
	if _, err := fmt.Fprintf(w, "var %s = []byte(%q)\n", varName, string(bs)); err != nil {
		return err
	}
	return nil
}
